#define constant G1_GEN_X = 0x0
#define constant G1_GEN_Y = 0x1
#define constant G1_GEN_Z = 0x2
#define constant OUTPUT_X = 0x3
#define constant OUTPUT_Y = 0x4
#define constant OUTPUT_Z = 0x5

// TODO remove unused range

#define constant TEMP_POINT_X = 0x6
#define constant TEMP_POINT_Y = 0x7
#define constant TEMP_POINT_Z = 0x8

#define constant TEMP0 = 0x9
#define constant TEMP1 = 0xa
#define constant TEMP2 = 0xb
#define constant TEMP3 = 0xc
#define constant TEMP3 = 0xd
#define constant TEMP4 = 0xe
#define constant TEMP5 = 0xf
#define constant TEMP6 = 0x10
#define constant TEMP7 = 0x11

#define constant ONE_VAL = 0x12
#define constant ONE_VAL_OFFSET = 0x360
#define constant ONE_VAL_OFFSET_PLUS_16 = 0x370
#define constant VAL_12 = 0x13
#define constant VAL_12_OFFSET = 0x390
#define constant VAL_12_OFFSET_PLUS_16 = 0x3a0
#define constant ZERO_VAL = 0x14

#define constant G1_GEN_X_OFFSET = 0x00
#define constant G1_GEN_X_OFFSET_PLUS_32 = 0x20
#define constant G1_GEN_Y_OFFSET = 0x30
#define constant G1_GEN_Y_OFFSET_PLUS_32 = 0x50
#define constant G1_GEN_Z_OFFSET = 0x60
#define constant G1_GEN_Z_OFFSET_PLUS_16 = 0x70
#define constant OUTPUT_X_OFFSET = 0x90
#define constant OUTPUT_X_OFFSET_PLUS_32 = 0xb0
#define constant OUTPUT_Y_OFFSET = 0xc0
#define constant OUTPUT_Y_OFFSET_PLUS_32 = 0xe0
#define constant OUTPUT_Z_OFFSET = 0xf0
#define constant OUTPUT_Z_OFFSET_PLUS_32 = 0x110
#define constant TEMP5_OFFSET = 0x02d0
#define constant TEMP5_OFFSET_PLUS_32 = 0x02f0

// OUTPUT_X <- OUTPUT_X / OUTPUT_Z
// OUTPUT_Y <- OUTPUT_Y / OUTPUT_Z
#define macro ToAffine() = takes(0) returns(0) {
    INVMOD_OUTPUT_Z()
    __mulmontx(OUTPUT_X, OUTPUT_X, OUTPUT_Z)
    __mulmontx(OUTPUT_Y, OUTPUT_Y, OUTPUT_Z)
}

#define macro InfCheckSetZero() = takes(0) returns(0) {
    __addmodx(OUTPUT_X, ZERO_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Y, ZERO_VAL, ZERO_VAL)
}

#define macro InfCheck() = takes(0) returns(0) {
    // if OUTPUT_X == 0, OUTPUT_Y != 0, OUTPUT_Z == 0:
    //   OUTPUT <- (0, 1, 0) return (0, 0) from the contract

    [OUTPUT_X_OFFSET]
    mload
    [OUTPUT_X_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    or
    // stack: OUTPUT_X (32 most significant bytes) | OUTPUT_X (16 least significant bytes)


    [OUTPUT_Z_OFFSET]
    mload
    [OUTPUT_Z_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    // stack: OUTPUT_Z (32 most significant bytes), OUTPUT_Z (16 least significant bytes)

    or
    or
    0x00
    eq

    // stack: OUTPUT_X | OUTPUT_Z == 0

    [OUTPUT_Y_OFFSET]
    mload
    [OUTPUT_Y_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    or
    0x00
    eq
    0x00
    eq
    // stack: OUTPUT_Y (32 most significant bytes) | OUTPUT_Y (16 least significant bytes) != 0, OUTPUT_X | OUTPUT_Z == 0

    // stack: OUTPUT_Y != 0, OUTPUT_X | OUTPUT_Z == 0

    eq
    0x00
    eq
    end1 jumpi

    // it's the infinity point, return (0, 0) per eip 2537
    // TODO: huff bug that causes jumpdests to get messed up when evmmax
    // ops are in the same macro
    InfCheckSetZero()

    0x60 // 96 = 48 * 2 == (0,0)
    [OUTPUT_X_OFFSET]
    return
end1:
}

// OUTPUT_SLOT <- OUTPUT_SLOT * 2
#define macro DoubleStep() = takes(0) returns(0) {
    // copy OUTPUT_(x/y/z) to TEMP_POINT_(x/y/z)
    __addmodx(TEMP_POINT_X, OUTPUT_X, ZERO_VAL)
    __addmodx(TEMP_POINT_Y, OUTPUT_Y, ZERO_VAL)
    __addmodx(TEMP_POINT_Z, OUTPUT_Z, ZERO_VAL)

    __mulmontx(TEMP0, TEMP_POINT_Y, TEMP_POINT_Y)
    __addmodx(OUTPUT_Z, TEMP0, TEMP0)
    __addmodx(OUTPUT_Z, OUTPUT_Z, OUTPUT_Z)
    __addmodx(OUTPUT_Z, OUTPUT_Z, OUTPUT_Z)
    __mulmontx(TEMP1, TEMP_POINT_Y, TEMP_POINT_Z)
    __mulmontx(TEMP2, TEMP_POINT_Z, TEMP_POINT_Z)
    __mulmontx(TEMP2, TEMP2, VAL_12)
    __mulmontx(OUTPUT_X, TEMP2, OUTPUT_Z)
    __addmodx(OUTPUT_Y, TEMP0, TEMP2)
    __mulmontx(OUTPUT_Z, TEMP1, OUTPUT_Z)
    __addmodx(TEMP1, TEMP2, TEMP2)
    __addmodx(TEMP2, TEMP1, TEMP2)
    __submodx(TEMP0, TEMP0, TEMP2)
    __mulmontx(OUTPUT_Y, TEMP0, OUTPUT_Y)
    __addmodx(OUTPUT_Y, OUTPUT_X, OUTPUT_Y)
    __mulmontx(TEMP1, TEMP_POINT_X, TEMP_POINT_Y)
    __mulmontx(OUTPUT_X, TEMP0, TEMP1)
    __addmodx(OUTPUT_X, OUTPUT_X, OUTPUT_X)
}

#define fn Double() = takes(0) returns(0) {
    DoubleStep()
}

#define fn DoubleAndAdd() = takes(0) returns(0) {
    DoubleStep()
    AddStep()
}

#define macro InitOutput() = takes(0) returns(0) {
    // copy g1_gen to where we construct the output
    // TODO, just place G1_gen in the output slot
    __addmodx(OUTPUT_X, ZERO_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Y, ONE_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Z, ZERO_VAL, ZERO_VAL)
}

#define constant OUTPUT_TEMP_X = 0xf // TEMP5
#define constant OUTPUT_TEMP_Y = 0x10 // TEMP6
#define constant OUTPUT_TEMP_Z = 0x11 // TEMP7
// OUTPUT_SLOT <- G1_GEN + OUTPUT_SLOT
#define macro AddStep() = takes(0) returns(0) {
    // copy G1_GEN into TEMP_POINT_(x/y/z)
    __addmodx(TEMP_POINT_X, G1_GEN_X, ZERO_VAL)
    __addmodx(TEMP_POINT_Y, G1_GEN_Y, ZERO_VAL)
    __addmodx(TEMP_POINT_Z, G1_GEN_Z, ZERO_VAL)

    __mulmontx(TEMP0, OUTPUT_X, TEMP_POINT_X)
    __mulmontx(TEMP1, OUTPUT_Y, TEMP_POINT_Y)
    __mulmontx(TEMP2, OUTPUT_Z, TEMP_POINT_Z)
    __addmodx(TEMP3, OUTPUT_X, OUTPUT_Y)
    __addmodx(TEMP4, TEMP_POINT_X, TEMP_POINT_Y)
    __mulmontx(TEMP3, TEMP3, TEMP4)
    __addmodx(TEMP4, TEMP0, TEMP1)
    __submodx(TEMP3, TEMP3, TEMP4)
    __addmodx(TEMP4, OUTPUT_Y, OUTPUT_Z)
    __addmodx(OUTPUT_TEMP_X, TEMP_POINT_Y, TEMP_POINT_Z)
    __mulmontx(TEMP4, TEMP4, OUTPUT_TEMP_X)
    __addmodx(OUTPUT_TEMP_X, TEMP1, TEMP2)
    __submodx(TEMP4, TEMP4, OUTPUT_TEMP_X)
    __addmodx(OUTPUT_TEMP_X, OUTPUT_X, OUTPUT_Z)
    __addmodx(OUTPUT_TEMP_Y, TEMP_POINT_X, TEMP_POINT_Z)
    __mulmontx(OUTPUT_TEMP_X, OUTPUT_TEMP_X, OUTPUT_TEMP_Y)
    __addmodx(OUTPUT_TEMP_Y, TEMP0, TEMP2)
    __submodx(OUTPUT_TEMP_Y, OUTPUT_TEMP_X, OUTPUT_TEMP_Y)
    __addmodx(OUTPUT_TEMP_X, TEMP0, TEMP0)
    __addmodx(TEMP0, OUTPUT_TEMP_X, TEMP0)
    __mulmontx(TEMP2, TEMP2, VAL_12)
    __addmodx(OUTPUT_TEMP_Z, TEMP1, TEMP2)
    __submodx(TEMP1, TEMP1, TEMP2)
    __mulmontx(OUTPUT_TEMP_Y, OUTPUT_TEMP_Y, VAL_12)
    __mulmontx(OUTPUT_TEMP_X, TEMP4, OUTPUT_TEMP_Y)
    __mulmontx(TEMP2, TEMP3, TEMP1)
    __submodx(OUTPUT_TEMP_X, TEMP2, OUTPUT_TEMP_X)
    __mulmontx(OUTPUT_TEMP_Y, OUTPUT_TEMP_Y, TEMP0)
    __mulmontx(TEMP1, TEMP1, OUTPUT_TEMP_Z)
    __addmodx(OUTPUT_TEMP_Y, TEMP1, OUTPUT_TEMP_Y)
    __mulmontx(TEMP0, TEMP0, TEMP3)
    __mulmontx(OUTPUT_TEMP_Z, OUTPUT_TEMP_Z, TEMP4)
    __addmodx(OUTPUT_TEMP_Z, OUTPUT_TEMP_Z, TEMP0)

    // copy the result to OUTPUT_X, OUTPUT_Y, OUTPUT_Z
    __addmodx(OUTPUT_X, OUTPUT_TEMP_X, ZERO_VAL)
    __addmodx(OUTPUT_Y, OUTPUT_TEMP_Y, ZERO_VAL)
    __addmodx(OUTPUT_Z, OUTPUT_TEMP_Z, ZERO_VAL)
}

#define macro CONVERT_OUTPUT_TO_NORM() = takes(0) returns(0) {
    __mulmontx(OUTPUT_X, OUTPUT_X, ONE_VAL)
    __mulmontx(OUTPUT_Y, OUTPUT_Y, ONE_VAL)
    __mulmontx(OUTPUT_Z, OUTPUT_Z, ONE_VAL) // TODO remove this after affine conversion is added in
}

#define macro MAIN() = takes(0) returns(0) {
    // allocate all the memory we will use
    0x00
    0x03c0
    mstore

    // store the constant 12
    0xc
    [VAL_12_OFFSET_PLUS_16]
    mstore

    // set the modulus
    0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f624
    0x00
    mstore
    //stack:

    0x1eabfffeb153ffffb9feffffffffaaab00000000000000000000000000000000
    0x20
    mstore
    //stack:

    0x00
    0x06
    0x00
    setmodx
    //stack:

    // load the scalar input
    0x00
    calldataload
    //stack: scalar

    // set the G1 generator (TODO: embed this in the bytecode and copy it directly to the evmmax memory space)
    // g1_gen.x (normal form) = 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb
    0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac58
    [G1_GEN_X_OFFSET]
    mstore
    //stack: scalar

    0x6c55e83ff97a1aeffb3af00adb22c6bb00000000000000000000000000000000
    [G1_GEN_X_OFFSET_PLUS_32]
    mstore

    // g1_gen.y (normal form) = 0x8b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
    0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3ed
    [G1_GEN_Y_OFFSET]
    mstore
    //stack: scalar

    0xd03cc744a2888ae40caa232946c5e7e100000000000000000000000000000000
    [G1_GEN_Y_OFFSET_PLUS_32]
    mstore
    //stack: scalar

    0x01
    [G1_GEN_Z_OFFSET_PLUS_16]
    mstore

    // TODO we only need to compute mont(1) once.
    // after: copying it elsewhere is cheaper
    0x01
    [ONE_VAL_OFFSET_PLUS_16]
    mstore

    [G1_GEN_X]
    dup1
    tomontx
    [G1_GEN_Y]
    dup1
    tomontx
    [G1_GEN_Z]
    dup1
    tomontx
    [VAL_12]
    dup1
    tomontx
    [ONE_VAL]
    dup1
    tomontx

    InitOutput()

    //stack: scalar

    // strip off assumed-zero msb of the scalar
    0x01
    shl

    // TODO: fail explicitly when a user provides a scalar that is larger than 255 bits

    // see how big the scalar is

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body0 rjumpi
    loop_body0 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body1 rjumpi
    loop_body1 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body2 rjumpi
    loop_body2 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body3 rjumpi
    loop_body3 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body4 rjumpi
    loop_body4 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body5 rjumpi
    loop_body5 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body6 rjumpi
    loop_body6 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body7 rjumpi
    loop_body7 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body8 rjumpi
    loop_body8 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body9 rjumpi
    loop_body9 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body10 rjumpi
    loop_body10 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body11 rjumpi
    loop_body11 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body12 rjumpi
    loop_body12 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body13 rjumpi
    loop_body13 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body14 rjumpi
    loop_body14 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body15 rjumpi
    loop_body15 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body16 rjumpi
    loop_body16 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body17 rjumpi
    loop_body17 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body18 rjumpi
    loop_body18 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body19 rjumpi
    loop_body19 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body20 rjumpi
    loop_body20 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body21 rjumpi
    loop_body21 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body22 rjumpi
    loop_body22 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body23 rjumpi
    loop_body23 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body24 rjumpi
    loop_body24 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body25 rjumpi
    loop_body25 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body26 rjumpi
    loop_body26 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body27 rjumpi
    loop_body27 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body28 rjumpi
    loop_body28 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body29 rjumpi
    loop_body29 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body30 rjumpi
    loop_body30 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body31 rjumpi
    loop_body31 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body32 rjumpi
    loop_body32 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body33 rjumpi
    loop_body33 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body34 rjumpi
    loop_body34 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body35 rjumpi
    loop_body35 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body36 rjumpi
    loop_body36 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body37 rjumpi
    loop_body37 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body38 rjumpi
    loop_body38 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body39 rjumpi
    loop_body39 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body40 rjumpi
    loop_body40 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body41 rjumpi
    loop_body41 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body42 rjumpi
    loop_body42 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body43 rjumpi
    loop_body43 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body44 rjumpi
    loop_body44 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body45 rjumpi
    loop_body45 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body46 rjumpi
    loop_body46 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body47 rjumpi
    loop_body47 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body48 rjumpi
    loop_body48 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body49 rjumpi
    loop_body49 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body50 rjumpi
    loop_body50 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body51 rjumpi
    loop_body51 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body52 rjumpi
    loop_body52 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body53 rjumpi
    loop_body53 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body54 rjumpi
    loop_body54 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body55 rjumpi
    loop_body55 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body56 rjumpi
    loop_body56 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body57 rjumpi
    loop_body57 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body58 rjumpi
    loop_body58 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body59 rjumpi
    loop_body59 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body60 rjumpi
    loop_body60 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body61 rjumpi
    loop_body61 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body62 rjumpi
    loop_body62 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body63 rjumpi
    loop_body63 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body64 rjumpi
    loop_body64 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body65 rjumpi
    loop_body65 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body66 rjumpi
    loop_body66 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body67 rjumpi
    loop_body67 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body68 rjumpi
    loop_body68 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body69 rjumpi
    loop_body69 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body70 rjumpi
    loop_body70 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body71 rjumpi
    loop_body71 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body72 rjumpi
    loop_body72 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body73 rjumpi
    loop_body73 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body74 rjumpi
    loop_body74 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body75 rjumpi
    loop_body75 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body76 rjumpi
    loop_body76 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body77 rjumpi
    loop_body77 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body78 rjumpi
    loop_body78 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body79 rjumpi
    loop_body79 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body80 rjumpi
    loop_body80 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body81 rjumpi
    loop_body81 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body82 rjumpi
    loop_body82 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body83 rjumpi
    loop_body83 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body84 rjumpi
    loop_body84 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body85 rjumpi
    loop_body85 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body86 rjumpi
    loop_body86 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body87 rjumpi
    loop_body87 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body88 rjumpi
    loop_body88 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body89 rjumpi
    loop_body89 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body90 rjumpi
    loop_body90 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body91 rjumpi
    loop_body91 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body92 rjumpi
    loop_body92 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body93 rjumpi
    loop_body93 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body94 rjumpi
    loop_body94 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body95 rjumpi
    loop_body95 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body96 rjumpi
    loop_body96 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body97 rjumpi
    loop_body97 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body98 rjumpi
    loop_body98 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body99 rjumpi
    loop_body99 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body100 rjumpi
    loop_body100 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body101 rjumpi
    loop_body101 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body102 rjumpi
    loop_body102 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body103 rjumpi
    loop_body103 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body104 rjumpi
    loop_body104 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body105 rjumpi
    loop_body105 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body106 rjumpi
    loop_body106 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body107 rjumpi
    loop_body107 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body108 rjumpi
    loop_body108 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body109 rjumpi
    loop_body109 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body110 rjumpi
    loop_body110 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body111 rjumpi
    loop_body111 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body112 rjumpi
    loop_body112 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body113 rjumpi
    loop_body113 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body114 rjumpi
    loop_body114 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body115 rjumpi
    loop_body115 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body116 rjumpi
    loop_body116 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body117 rjumpi
    loop_body117 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body118 rjumpi
    loop_body118 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body119 rjumpi
    loop_body119 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body120 rjumpi
    loop_body120 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body121 rjumpi
    loop_body121 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body122 rjumpi
    loop_body122 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body123 rjumpi
    loop_body123 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body124 rjumpi
    loop_body124 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body125 rjumpi
    loop_body125 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body126 rjumpi
    loop_body126 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body127 rjumpi
    loop_body127 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body128 rjumpi
    loop_body128 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body129 rjumpi
    loop_body129 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body130 rjumpi
    loop_body130 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body131 rjumpi
    loop_body131 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body132 rjumpi
    loop_body132 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body133 rjumpi
    loop_body133 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body134 rjumpi
    loop_body134 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body135 rjumpi
    loop_body135 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body136 rjumpi
    loop_body136 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body137 rjumpi
    loop_body137 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body138 rjumpi
    loop_body138 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body139 rjumpi
    loop_body139 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body140 rjumpi
    loop_body140 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body141 rjumpi
    loop_body141 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body142 rjumpi
    loop_body142 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body143 rjumpi
    loop_body143 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body144 rjumpi
    loop_body144 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body145 rjumpi
    loop_body145 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body146 rjumpi
    loop_body146 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body147 rjumpi
    loop_body147 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body148 rjumpi
    loop_body148 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body149 rjumpi
    loop_body149 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body150 rjumpi
    loop_body150 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body151 rjumpi
    loop_body151 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body152 rjumpi
    loop_body152 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body153 rjumpi
    loop_body153 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body154 rjumpi
    loop_body154 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body155 rjumpi
    loop_body155 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body156 rjumpi
    loop_body156 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body157 rjumpi
    loop_body157 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body158 rjumpi
    loop_body158 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body159 rjumpi
    loop_body159 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body160 rjumpi
    loop_body160 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body161 rjumpi
    loop_body161 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body162 rjumpi
    loop_body162 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body163 rjumpi
    loop_body163 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body164 rjumpi
    loop_body164 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body165 rjumpi
    loop_body165 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body166 rjumpi
    loop_body166 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body167 rjumpi
    loop_body167 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body168 rjumpi
    loop_body168 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body169 rjumpi
    loop_body169 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body170 rjumpi
    loop_body170 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body171 rjumpi
    loop_body171 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body172 rjumpi
    loop_body172 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body173 rjumpi
    loop_body173 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body174 rjumpi
    loop_body174 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body175 rjumpi
    loop_body175 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body176 rjumpi
    loop_body176 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body177 rjumpi
    loop_body177 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body178 rjumpi
    loop_body178 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body179 rjumpi
    loop_body179 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body180 rjumpi
    loop_body180 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body181 rjumpi
    loop_body181 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body182 rjumpi
    loop_body182 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body183 rjumpi
    loop_body183 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body184 rjumpi
    loop_body184 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body185 rjumpi
    loop_body185 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body186 rjumpi
    loop_body186 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body187 rjumpi
    loop_body187 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body188 rjumpi
    loop_body188 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body189 rjumpi
    loop_body189 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body190 rjumpi
    loop_body190 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body191 rjumpi
    loop_body191 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body192 rjumpi
    loop_body192 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body193 rjumpi
    loop_body193 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body194 rjumpi
    loop_body194 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body195 rjumpi
    loop_body195 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body196 rjumpi
    loop_body196 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body197 rjumpi
    loop_body197 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body198 rjumpi
    loop_body198 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body199 rjumpi
    loop_body199 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body200 rjumpi
    loop_body200 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body201 rjumpi
    loop_body201 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body202 rjumpi
    loop_body202 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body203 rjumpi
    loop_body203 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body204 rjumpi
    loop_body204 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body205 rjumpi
    loop_body205 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body206 rjumpi
    loop_body206 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body207 rjumpi
    loop_body207 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body208 rjumpi
    loop_body208 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body209 rjumpi
    loop_body209 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body210 rjumpi
    loop_body210 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body211 rjumpi
    loop_body211 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body212 rjumpi
    loop_body212 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body213 rjumpi
    loop_body213 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body214 rjumpi
    loop_body214 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body215 rjumpi
    loop_body215 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body216 rjumpi
    loop_body216 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body217 rjumpi
    loop_body217 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body218 rjumpi
    loop_body218 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body219 rjumpi
    loop_body219 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body220 rjumpi
    loop_body220 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body221 rjumpi
    loop_body221 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body222 rjumpi
    loop_body222 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body223 rjumpi
    loop_body223 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body224 rjumpi
    loop_body224 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body225 rjumpi
    loop_body225 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body226 rjumpi
    loop_body226 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body227 rjumpi
    loop_body227 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body228 rjumpi
    loop_body228 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body229 rjumpi
    loop_body229 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body230 rjumpi
    loop_body230 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body231 rjumpi
    loop_body231 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body232 rjumpi
    loop_body232 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body233 rjumpi
    loop_body233 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body234 rjumpi
    loop_body234 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body235 rjumpi
    loop_body235 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body236 rjumpi
    loop_body236 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body237 rjumpi
    loop_body237 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body238 rjumpi
    loop_body238 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body239 rjumpi
    loop_body239 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body240 rjumpi
    loop_body240 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body241 rjumpi
    loop_body241 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body242 rjumpi
    loop_body242 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body243 rjumpi
    loop_body243 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body244 rjumpi
    loop_body244 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body245 rjumpi
    loop_body245 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body246 rjumpi
    loop_body246 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body247 rjumpi
    loop_body247 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body248 rjumpi
    loop_body248 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body249 rjumpi
    loop_body249 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body250 rjumpi
    loop_body250 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body251 rjumpi
    loop_body251 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body252 rjumpi
    loop_body252 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body253 rjumpi
    loop_body253 jumpi

    0x01 shl

    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body254 rjumpi
    loop_body254 jumpi

    0x01 shl


// main loop

loop_body0: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_0 rjumpi
    double_step_0 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body1)
    
        loop_body1 jump
    

double_step_0:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body1: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_1 rjumpi
    double_step_1 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body2)
    
        loop_body2 jump
    

double_step_1:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body2: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_2 rjumpi
    double_step_2 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body3)
    
        loop_body3 jump
    

double_step_2:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body3: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_3 rjumpi
    double_step_3 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body4)
    
        loop_body4 jump
    

double_step_3:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body4: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_4 rjumpi
    double_step_4 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body5)
    
        loop_body5 jump
    

double_step_4:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body5: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_5 rjumpi
    double_step_5 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body6)
    
        loop_body6 jump
    

double_step_5:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body6: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_6 rjumpi
    double_step_6 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body7)
    
        loop_body7 jump
    

double_step_6:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body7: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_7 rjumpi
    double_step_7 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body8)
    
        loop_body8 jump
    

double_step_7:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body8: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_8 rjumpi
    double_step_8 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body9)
    
        loop_body9 jump
    

double_step_8:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body9: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_9 rjumpi
    double_step_9 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body10)
    
        loop_body10 jump
    

double_step_9:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body10: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_10 rjumpi
    double_step_10 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body11)
    
        loop_body11 jump
    

double_step_10:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body11: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_11 rjumpi
    double_step_11 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body12)
    
        loop_body12 jump
    

double_step_11:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body12: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_12 rjumpi
    double_step_12 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body13)
    
        loop_body13 jump
    

double_step_12:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body13: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_13 rjumpi
    double_step_13 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body14)
    
        loop_body14 jump
    

double_step_13:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body14: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_14 rjumpi
    double_step_14 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body15)
    
        loop_body15 jump
    

double_step_14:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body15: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_15 rjumpi
    double_step_15 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body16)
    
        loop_body16 jump
    

double_step_15:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body16: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_16 rjumpi
    double_step_16 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body17)
    
        loop_body17 jump
    

double_step_16:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body17: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_17 rjumpi
    double_step_17 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body18)
    
        loop_body18 jump
    

double_step_17:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body18: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_18 rjumpi
    double_step_18 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body19)
    
        loop_body19 jump
    

double_step_18:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body19: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_19 rjumpi
    double_step_19 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body20)
    
        loop_body20 jump
    

double_step_19:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body20: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_20 rjumpi
    double_step_20 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body21)
    
        loop_body21 jump
    

double_step_20:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body21: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_21 rjumpi
    double_step_21 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body22)
    
        loop_body22 jump
    

double_step_21:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body22: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_22 rjumpi
    double_step_22 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body23)
    
        loop_body23 jump
    

double_step_22:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body23: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_23 rjumpi
    double_step_23 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body24)
    
        loop_body24 jump
    

double_step_23:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body24: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_24 rjumpi
    double_step_24 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body25)
    
        loop_body25 jump
    

double_step_24:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body25: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_25 rjumpi
    double_step_25 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body26)
    
        loop_body26 jump
    

double_step_25:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body26: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_26 rjumpi
    double_step_26 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body27)
    
        loop_body27 jump
    

double_step_26:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body27: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_27 rjumpi
    double_step_27 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body28)
    
        loop_body28 jump
    

double_step_27:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body28: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_28 rjumpi
    double_step_28 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body29)
    
        loop_body29 jump
    

double_step_28:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body29: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_29 rjumpi
    double_step_29 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body30)
    
        loop_body30 jump
    

double_step_29:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body30: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_30 rjumpi
    double_step_30 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body31)
    
        loop_body31 jump
    

double_step_30:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body31: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_31 rjumpi
    double_step_31 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body32)
    
        loop_body32 jump
    

double_step_31:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body32: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_32 rjumpi
    double_step_32 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body33)
    
        loop_body33 jump
    

double_step_32:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body33: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_33 rjumpi
    double_step_33 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body34)
    
        loop_body34 jump
    

double_step_33:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body34: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_34 rjumpi
    double_step_34 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body35)
    
        loop_body35 jump
    

double_step_34:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body35: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_35 rjumpi
    double_step_35 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body36)
    
        loop_body36 jump
    

double_step_35:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body36: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_36 rjumpi
    double_step_36 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body37)
    
        loop_body37 jump
    

double_step_36:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body37: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_37 rjumpi
    double_step_37 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body38)
    
        loop_body38 jump
    

double_step_37:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body38: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_38 rjumpi
    double_step_38 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body39)
    
        loop_body39 jump
    

double_step_38:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body39: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_39 rjumpi
    double_step_39 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body40)
    
        loop_body40 jump
    

double_step_39:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body40: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_40 rjumpi
    double_step_40 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body41)
    
        loop_body41 jump
    

double_step_40:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body41: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_41 rjumpi
    double_step_41 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body42)
    
        loop_body42 jump
    

double_step_41:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body42: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_42 rjumpi
    double_step_42 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body43)
    
        loop_body43 jump
    

double_step_42:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body43: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_43 rjumpi
    double_step_43 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body44)
    
        loop_body44 jump
    

double_step_43:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body44: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_44 rjumpi
    double_step_44 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body45)
    
        loop_body45 jump
    

double_step_44:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body45: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_45 rjumpi
    double_step_45 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body46)
    
        loop_body46 jump
    

double_step_45:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body46: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_46 rjumpi
    double_step_46 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body47)
    
        loop_body47 jump
    

double_step_46:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body47: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_47 rjumpi
    double_step_47 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body48)
    
        loop_body48 jump
    

double_step_47:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body48: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_48 rjumpi
    double_step_48 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body49)
    
        loop_body49 jump
    

double_step_48:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body49: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_49 rjumpi
    double_step_49 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body50)
    
        loop_body50 jump
    

double_step_49:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body50: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_50 rjumpi
    double_step_50 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body51)
    
        loop_body51 jump
    

double_step_50:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body51: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_51 rjumpi
    double_step_51 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body52)
    
        loop_body52 jump
    

double_step_51:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body52: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_52 rjumpi
    double_step_52 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body53)
    
        loop_body53 jump
    

double_step_52:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body53: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_53 rjumpi
    double_step_53 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body54)
    
        loop_body54 jump
    

double_step_53:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body54: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_54 rjumpi
    double_step_54 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body55)
    
        loop_body55 jump
    

double_step_54:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body55: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_55 rjumpi
    double_step_55 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body56)
    
        loop_body56 jump
    

double_step_55:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body56: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_56 rjumpi
    double_step_56 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body57)
    
        loop_body57 jump
    

double_step_56:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body57: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_57 rjumpi
    double_step_57 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body58)
    
        loop_body58 jump
    

double_step_57:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body58: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_58 rjumpi
    double_step_58 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body59)
    
        loop_body59 jump
    

double_step_58:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body59: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_59 rjumpi
    double_step_59 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body60)
    
        loop_body60 jump
    

double_step_59:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body60: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_60 rjumpi
    double_step_60 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body61)
    
        loop_body61 jump
    

double_step_60:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body61: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_61 rjumpi
    double_step_61 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body62)
    
        loop_body62 jump
    

double_step_61:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body62: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_62 rjumpi
    double_step_62 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body63)
    
        loop_body63 jump
    

double_step_62:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body63: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_63 rjumpi
    double_step_63 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body64)
    
        loop_body64 jump
    

double_step_63:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body64: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_64 rjumpi
    double_step_64 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body65)
    
        loop_body65 jump
    

double_step_64:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body65: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_65 rjumpi
    double_step_65 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body66)
    
        loop_body66 jump
    

double_step_65:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body66: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_66 rjumpi
    double_step_66 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body67)
    
        loop_body67 jump
    

double_step_66:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body67: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_67 rjumpi
    double_step_67 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body68)
    
        loop_body68 jump
    

double_step_67:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body68: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_68 rjumpi
    double_step_68 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body69)
    
        loop_body69 jump
    

double_step_68:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body69: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_69 rjumpi
    double_step_69 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body70)
    
        loop_body70 jump
    

double_step_69:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body70: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_70 rjumpi
    double_step_70 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body71)
    
        loop_body71 jump
    

double_step_70:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body71: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_71 rjumpi
    double_step_71 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body72)
    
        loop_body72 jump
    

double_step_71:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body72: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_72 rjumpi
    double_step_72 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body73)
    
        loop_body73 jump
    

double_step_72:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body73: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_73 rjumpi
    double_step_73 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body74)
    
        loop_body74 jump
    

double_step_73:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body74: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_74 rjumpi
    double_step_74 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body75)
    
        loop_body75 jump
    

double_step_74:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body75: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_75 rjumpi
    double_step_75 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body76)
    
        loop_body76 jump
    

double_step_75:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body76: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_76 rjumpi
    double_step_76 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body77)
    
        loop_body77 jump
    

double_step_76:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body77: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_77 rjumpi
    double_step_77 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body78)
    
        loop_body78 jump
    

double_step_77:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body78: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_78 rjumpi
    double_step_78 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body79)
    
        loop_body79 jump
    

double_step_78:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body79: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_79 rjumpi
    double_step_79 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body80)
    
        loop_body80 jump
    

double_step_79:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body80: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_80 rjumpi
    double_step_80 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body81)
    
        loop_body81 jump
    

double_step_80:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body81: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_81 rjumpi
    double_step_81 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body82)
    
        loop_body82 jump
    

double_step_81:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body82: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_82 rjumpi
    double_step_82 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body83)
    
        loop_body83 jump
    

double_step_82:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body83: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_83 rjumpi
    double_step_83 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body84)
    
        loop_body84 jump
    

double_step_83:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body84: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_84 rjumpi
    double_step_84 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body85)
    
        loop_body85 jump
    

double_step_84:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body85: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_85 rjumpi
    double_step_85 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body86)
    
        loop_body86 jump
    

double_step_85:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body86: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_86 rjumpi
    double_step_86 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body87)
    
        loop_body87 jump
    

double_step_86:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body87: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_87 rjumpi
    double_step_87 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body88)
    
        loop_body88 jump
    

double_step_87:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body88: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_88 rjumpi
    double_step_88 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body89)
    
        loop_body89 jump
    

double_step_88:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body89: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_89 rjumpi
    double_step_89 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body90)
    
        loop_body90 jump
    

double_step_89:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body90: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_90 rjumpi
    double_step_90 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body91)
    
        loop_body91 jump
    

double_step_90:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body91: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_91 rjumpi
    double_step_91 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body92)
    
        loop_body92 jump
    

double_step_91:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body92: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_92 rjumpi
    double_step_92 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body93)
    
        loop_body93 jump
    

double_step_92:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body93: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_93 rjumpi
    double_step_93 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body94)
    
        loop_body94 jump
    

double_step_93:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body94: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_94 rjumpi
    double_step_94 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body95)
    
        loop_body95 jump
    

double_step_94:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body95: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_95 rjumpi
    double_step_95 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body96)
    
        loop_body96 jump
    

double_step_95:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body96: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_96 rjumpi
    double_step_96 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body97)
    
        loop_body97 jump
    

double_step_96:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body97: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_97 rjumpi
    double_step_97 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body98)
    
        loop_body98 jump
    

double_step_97:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body98: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_98 rjumpi
    double_step_98 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body99)
    
        loop_body99 jump
    

double_step_98:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body99: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_99 rjumpi
    double_step_99 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body100)
    
        loop_body100 jump
    

double_step_99:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body100: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_100 rjumpi
    double_step_100 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body101)
    
        loop_body101 jump
    

double_step_100:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body101: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_101 rjumpi
    double_step_101 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body102)
    
        loop_body102 jump
    

double_step_101:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body102: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_102 rjumpi
    double_step_102 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body103)
    
        loop_body103 jump
    

double_step_102:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body103: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_103 rjumpi
    double_step_103 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body104)
    
        loop_body104 jump
    

double_step_103:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body104: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_104 rjumpi
    double_step_104 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body105)
    
        loop_body105 jump
    

double_step_104:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body105: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_105 rjumpi
    double_step_105 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body106)
    
        loop_body106 jump
    

double_step_105:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body106: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_106 rjumpi
    double_step_106 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body107)
    
        loop_body107 jump
    

double_step_106:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body107: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_107 rjumpi
    double_step_107 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body108)
    
        loop_body108 jump
    

double_step_107:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body108: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_108 rjumpi
    double_step_108 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body109)
    
        loop_body109 jump
    

double_step_108:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body109: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_109 rjumpi
    double_step_109 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body110)
    
        loop_body110 jump
    

double_step_109:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body110: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_110 rjumpi
    double_step_110 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body111)
    
        loop_body111 jump
    

double_step_110:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body111: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_111 rjumpi
    double_step_111 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body112)
    
        loop_body112 jump
    

double_step_111:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body112: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_112 rjumpi
    double_step_112 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body113)
    
        loop_body113 jump
    

double_step_112:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body113: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_113 rjumpi
    double_step_113 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body114)
    
        loop_body114 jump
    

double_step_113:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body114: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_114 rjumpi
    double_step_114 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body115)
    
        loop_body115 jump
    

double_step_114:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body115: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_115 rjumpi
    double_step_115 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body116)
    
        loop_body116 jump
    

double_step_115:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body116: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_116 rjumpi
    double_step_116 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body117)
    
        loop_body117 jump
    

double_step_116:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body117: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_117 rjumpi
    double_step_117 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body118)
    
        loop_body118 jump
    

double_step_117:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body118: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_118 rjumpi
    double_step_118 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body119)
    
        loop_body119 jump
    

double_step_118:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body119: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_119 rjumpi
    double_step_119 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body120)
    
        loop_body120 jump
    

double_step_119:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body120: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_120 rjumpi
    double_step_120 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body121)
    
        loop_body121 jump
    

double_step_120:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body121: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_121 rjumpi
    double_step_121 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body122)
    
        loop_body122 jump
    

double_step_121:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body122: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_122 rjumpi
    double_step_122 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body123)
    
        loop_body123 jump
    

double_step_122:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body123: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_123 rjumpi
    double_step_123 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body124)
    
        loop_body124 jump
    

double_step_123:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body124: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_124 rjumpi
    double_step_124 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body125)
    
        loop_body125 jump
    

double_step_124:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body125: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_125 rjumpi
    double_step_125 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body126)
    
        loop_body126 jump
    

double_step_125:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body126: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_126 rjumpi
    double_step_126 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body127)
    
        loop_body127 jump
    

double_step_126:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body127: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_127 rjumpi
    double_step_127 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body128)
    
        loop_body128 jump
    

double_step_127:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body128: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_128 rjumpi
    double_step_128 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body129)
    
        loop_body129 jump
    

double_step_128:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body129: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_129 rjumpi
    double_step_129 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body130)
    
        loop_body130 jump
    

double_step_129:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body130: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_130 rjumpi
    double_step_130 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body131)
    
        loop_body131 jump
    

double_step_130:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body131: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_131 rjumpi
    double_step_131 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body132)
    
        loop_body132 jump
    

double_step_131:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body132: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_132 rjumpi
    double_step_132 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body133)
    
        loop_body133 jump
    

double_step_132:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body133: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_133 rjumpi
    double_step_133 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body134)
    
        loop_body134 jump
    

double_step_133:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body134: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_134 rjumpi
    double_step_134 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body135)
    
        loop_body135 jump
    

double_step_134:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body135: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_135 rjumpi
    double_step_135 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body136)
    
        loop_body136 jump
    

double_step_135:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body136: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_136 rjumpi
    double_step_136 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body137)
    
        loop_body137 jump
    

double_step_136:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body137: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_137 rjumpi
    double_step_137 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body138)
    
        loop_body138 jump
    

double_step_137:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body138: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_138 rjumpi
    double_step_138 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body139)
    
        loop_body139 jump
    

double_step_138:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body139: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_139 rjumpi
    double_step_139 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body140)
    
        loop_body140 jump
    

double_step_139:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body140: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_140 rjumpi
    double_step_140 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body141)
    
        loop_body141 jump
    

double_step_140:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body141: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_141 rjumpi
    double_step_141 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body142)
    
        loop_body142 jump
    

double_step_141:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body142: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_142 rjumpi
    double_step_142 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body143)
    
        loop_body143 jump
    

double_step_142:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body143: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_143 rjumpi
    double_step_143 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body144)
    
        loop_body144 jump
    

double_step_143:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body144: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_144 rjumpi
    double_step_144 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body145)
    
        loop_body145 jump
    

double_step_144:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body145: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_145 rjumpi
    double_step_145 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body146)
    
        loop_body146 jump
    

double_step_145:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body146: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_146 rjumpi
    double_step_146 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body147)
    
        loop_body147 jump
    

double_step_146:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body147: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_147 rjumpi
    double_step_147 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body148)
    
        loop_body148 jump
    

double_step_147:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body148: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_148 rjumpi
    double_step_148 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body149)
    
        loop_body149 jump
    

double_step_148:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body149: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_149 rjumpi
    double_step_149 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body150)
    
        loop_body150 jump
    

double_step_149:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body150: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_150 rjumpi
    double_step_150 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body151)
    
        loop_body151 jump
    

double_step_150:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body151: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_151 rjumpi
    double_step_151 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body152)
    
        loop_body152 jump
    

double_step_151:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body152: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_152 rjumpi
    double_step_152 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body153)
    
        loop_body153 jump
    

double_step_152:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body153: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_153 rjumpi
    double_step_153 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body154)
    
        loop_body154 jump
    

double_step_153:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body154: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_154 rjumpi
    double_step_154 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body155)
    
        loop_body155 jump
    

double_step_154:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body155: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_155 rjumpi
    double_step_155 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body156)
    
        loop_body156 jump
    

double_step_155:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body156: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_156 rjumpi
    double_step_156 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body157)
    
        loop_body157 jump
    

double_step_156:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body157: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_157 rjumpi
    double_step_157 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body158)
    
        loop_body158 jump
    

double_step_157:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body158: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_158 rjumpi
    double_step_158 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body159)
    
        loop_body159 jump
    

double_step_158:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body159: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_159 rjumpi
    double_step_159 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body160)
    
        loop_body160 jump
    

double_step_159:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body160: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_160 rjumpi
    double_step_160 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body161)
    
        loop_body161 jump
    

double_step_160:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body161: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_161 rjumpi
    double_step_161 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body162)
    
        loop_body162 jump
    

double_step_161:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body162: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_162 rjumpi
    double_step_162 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body163)
    
        loop_body163 jump
    

double_step_162:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body163: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_163 rjumpi
    double_step_163 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body164)
    
        loop_body164 jump
    

double_step_163:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body164: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_164 rjumpi
    double_step_164 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body165)
    
        loop_body165 jump
    

double_step_164:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body165: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_165 rjumpi
    double_step_165 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body166)
    
        loop_body166 jump
    

double_step_165:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body166: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_166 rjumpi
    double_step_166 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body167)
    
        loop_body167 jump
    

double_step_166:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body167: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_167 rjumpi
    double_step_167 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body168)
    
        loop_body168 jump
    

double_step_167:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body168: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_168 rjumpi
    double_step_168 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body169)
    
        loop_body169 jump
    

double_step_168:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body169: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_169 rjumpi
    double_step_169 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body170)
    
        loop_body170 jump
    

double_step_169:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body170: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_170 rjumpi
    double_step_170 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body171)
    
        loop_body171 jump
    

double_step_170:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body171: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_171 rjumpi
    double_step_171 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body172)
    
        loop_body172 jump
    

double_step_171:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body172: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_172 rjumpi
    double_step_172 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body173)
    
        loop_body173 jump
    

double_step_172:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body173: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_173 rjumpi
    double_step_173 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body174)
    
        loop_body174 jump
    

double_step_173:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body174: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_174 rjumpi
    double_step_174 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body175)
    
        loop_body175 jump
    

double_step_174:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body175: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_175 rjumpi
    double_step_175 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body176)
    
        loop_body176 jump
    

double_step_175:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body176: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_176 rjumpi
    double_step_176 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body177)
    
        loop_body177 jump
    

double_step_176:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body177: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_177 rjumpi
    double_step_177 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body178)
    
        loop_body178 jump
    

double_step_177:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body178: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_178 rjumpi
    double_step_178 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body179)
    
        loop_body179 jump
    

double_step_178:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body179: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_179 rjumpi
    double_step_179 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body180)
    
        loop_body180 jump
    

double_step_179:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body180: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_180 rjumpi
    double_step_180 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body181)
    
        loop_body181 jump
    

double_step_180:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body181: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_181 rjumpi
    double_step_181 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body182)
    
        loop_body182 jump
    

double_step_181:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body182: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_182 rjumpi
    double_step_182 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body183)
    
        loop_body183 jump
    

double_step_182:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body183: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_183 rjumpi
    double_step_183 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body184)
    
        loop_body184 jump
    

double_step_183:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body184: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_184 rjumpi
    double_step_184 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body185)
    
        loop_body185 jump
    

double_step_184:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body185: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_185 rjumpi
    double_step_185 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body186)
    
        loop_body186 jump
    

double_step_185:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body186: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_186 rjumpi
    double_step_186 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body187)
    
        loop_body187 jump
    

double_step_186:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body187: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_187 rjumpi
    double_step_187 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body188)
    
        loop_body188 jump
    

double_step_187:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body188: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_188 rjumpi
    double_step_188 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body189)
    
        loop_body189 jump
    

double_step_188:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body189: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_189 rjumpi
    double_step_189 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body190)
    
        loop_body190 jump
    

double_step_189:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body190: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_190 rjumpi
    double_step_190 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body191)
    
        loop_body191 jump
    

double_step_190:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body191: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_191 rjumpi
    double_step_191 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body192)
    
        loop_body192 jump
    

double_step_191:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body192: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_192 rjumpi
    double_step_192 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body193)
    
        loop_body193 jump
    

double_step_192:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body193: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_193 rjumpi
    double_step_193 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body194)
    
        loop_body194 jump
    

double_step_193:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body194: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_194 rjumpi
    double_step_194 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body195)
    
        loop_body195 jump
    

double_step_194:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body195: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_195 rjumpi
    double_step_195 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body196)
    
        loop_body196 jump
    

double_step_195:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body196: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_196 rjumpi
    double_step_196 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body197)
    
        loop_body197 jump
    

double_step_196:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body197: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_197 rjumpi
    double_step_197 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body198)
    
        loop_body198 jump
    

double_step_197:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body198: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_198 rjumpi
    double_step_198 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body199)
    
        loop_body199 jump
    

double_step_198:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body199: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_199 rjumpi
    double_step_199 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body200)
    
        loop_body200 jump
    

double_step_199:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body200: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_200 rjumpi
    double_step_200 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body201)
    
        loop_body201 jump
    

double_step_200:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body201: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_201 rjumpi
    double_step_201 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body202)
    
        loop_body202 jump
    

double_step_201:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body202: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_202 rjumpi
    double_step_202 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body203)
    
        loop_body203 jump
    

double_step_202:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body203: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_203 rjumpi
    double_step_203 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body204)
    
        loop_body204 jump
    

double_step_203:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body204: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_204 rjumpi
    double_step_204 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body205)
    
        loop_body205 jump
    

double_step_204:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body205: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_205 rjumpi
    double_step_205 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body206)
    
        loop_body206 jump
    

double_step_205:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body206: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_206 rjumpi
    double_step_206 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body207)
    
        loop_body207 jump
    

double_step_206:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body207: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_207 rjumpi
    double_step_207 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body208)
    
        loop_body208 jump
    

double_step_207:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body208: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_208 rjumpi
    double_step_208 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body209)
    
        loop_body209 jump
    

double_step_208:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body209: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_209 rjumpi
    double_step_209 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body210)
    
        loop_body210 jump
    

double_step_209:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body210: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_210 rjumpi
    double_step_210 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body211)
    
        loop_body211 jump
    

double_step_210:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body211: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_211 rjumpi
    double_step_211 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body212)
    
        loop_body212 jump
    

double_step_211:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body212: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_212 rjumpi
    double_step_212 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body213)
    
        loop_body213 jump
    

double_step_212:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body213: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_213 rjumpi
    double_step_213 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body214)
    
        loop_body214 jump
    

double_step_213:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body214: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_214 rjumpi
    double_step_214 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body215)
    
        loop_body215 jump
    

double_step_214:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body215: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_215 rjumpi
    double_step_215 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body216)
    
        loop_body216 jump
    

double_step_215:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body216: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_216 rjumpi
    double_step_216 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body217)
    
        loop_body217 jump
    

double_step_216:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body217: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_217 rjumpi
    double_step_217 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body218)
    
        loop_body218 jump
    

double_step_217:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body218: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_218 rjumpi
    double_step_218 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body219)
    
        loop_body219 jump
    

double_step_218:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body219: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_219 rjumpi
    double_step_219 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body220)
    
        loop_body220 jump
    

double_step_219:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body220: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_220 rjumpi
    double_step_220 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body221)
    
        loop_body221 jump
    

double_step_220:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body221: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_221 rjumpi
    double_step_221 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body222)
    
        loop_body222 jump
    

double_step_221:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body222: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_222 rjumpi
    double_step_222 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body223)
    
        loop_body223 jump
    

double_step_222:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body223: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_223 rjumpi
    double_step_223 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body224)
    
        loop_body224 jump
    

double_step_223:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body224: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_224 rjumpi
    double_step_224 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body225)
    
        loop_body225 jump
    

double_step_224:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body225: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_225 rjumpi
    double_step_225 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body226)
    
        loop_body226 jump
    

double_step_225:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body226: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_226 rjumpi
    double_step_226 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body227)
    
        loop_body227 jump
    

double_step_226:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body227: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_227 rjumpi
    double_step_227 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body228)
    
        loop_body228 jump
    

double_step_227:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body228: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_228 rjumpi
    double_step_228 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body229)
    
        loop_body229 jump
    

double_step_228:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body229: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_229 rjumpi
    double_step_229 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body230)
    
        loop_body230 jump
    

double_step_229:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body230: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_230 rjumpi
    double_step_230 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body231)
    
        loop_body231 jump
    

double_step_230:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body231: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_231 rjumpi
    double_step_231 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body232)
    
        loop_body232 jump
    

double_step_231:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body232: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_232 rjumpi
    double_step_232 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body233)
    
        loop_body233 jump
    

double_step_232:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body233: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_233 rjumpi
    double_step_233 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body234)
    
        loop_body234 jump
    

double_step_233:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body234: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_234 rjumpi
    double_step_234 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body235)
    
        loop_body235 jump
    

double_step_234:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body235: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_235 rjumpi
    double_step_235 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body236)
    
        loop_body236 jump
    

double_step_235:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body236: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_236 rjumpi
    double_step_236 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body237)
    
        loop_body237 jump
    

double_step_236:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body237: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_237 rjumpi
    double_step_237 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body238)
    
        loop_body238 jump
    

double_step_237:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body238: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_238 rjumpi
    double_step_238 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body239)
    
        loop_body239 jump
    

double_step_238:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body239: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_239 rjumpi
    double_step_239 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body240)
    
        loop_body240 jump
    

double_step_239:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body240: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_240 rjumpi
    double_step_240 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body241)
    
        loop_body241 jump
    

double_step_240:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body241: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_241 rjumpi
    double_step_241 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body242)
    
        loop_body242 jump
    

double_step_241:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body242: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_242 rjumpi
    double_step_242 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body243)
    
        loop_body243 jump
    

double_step_242:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body243: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_243 rjumpi
    double_step_243 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body244)
    
        loop_body244 jump
    

double_step_243:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body244: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_244 rjumpi
    double_step_244 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body245)
    
        loop_body245 jump
    

double_step_244:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body245: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_245 rjumpi
    double_step_245 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body246)
    
        loop_body246 jump
    

double_step_245:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body246: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_246 rjumpi
    double_step_246 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body247)
    
        loop_body247 jump
    

double_step_246:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body247: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_247 rjumpi
    double_step_247 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body248)
    
        loop_body248 jump
    

double_step_247:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body248: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_248 rjumpi
    double_step_248 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body249)
    
        loop_body249 jump
    

double_step_248:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body249: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_249 rjumpi
    double_step_249 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body250)
    
        loop_body250 jump
    

double_step_249:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body250: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_250 rjumpi
    double_step_250 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body251)
    
        loop_body251 jump
    

double_step_250:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body251: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_251 rjumpi
    double_step_251 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body252)
    
        loop_body252 jump
    

double_step_251:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body252: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_252 rjumpi
    double_step_252 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body253)
    
        loop_body253 jump
    

double_step_252:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body253: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_253 rjumpi
    double_step_253 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body254)
    
        loop_body254 jump
    

double_step_253:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl



loop_body254: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_254 rjumpi
    double_step_254 jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    DoubleAndAdd()

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body255)
    
        end jump
    

double_step_254:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl




// convert the output to canonical form
end:
    InfCheck()
    CONVERT_OUTPUT_TO_NORM()

    // TODO
    // CONVERT_TO_AFFINE()

    0x90
    [OUTPUT_X_OFFSET]
    return
}