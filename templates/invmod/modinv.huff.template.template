// Code generated by {{ .Meta.Name }}. DO NOT EDIT.

package evmmax_addchain

{{ alloc_slot("MODULUS") -}}
{{ alloc_slot("ONE_VAL") -}}
{{ alloc_slot("ONE_VAL_MONT") -}}
{{ alloc_slot("ZERO_VAL") -}}

// Allocate Temporaries.
{{- range .Program.Temporaries }}
{{"{{"}} alloc_slot("{{ . }}") {{"}}"}}
{{- end }}

{{"{{"}} alloc_slot("x") {{"}}"}}
{{"{{"}} alloc_slot("z") {{"}}"}}

#define macro FqInv() = takes(0) returns(0) {
	{{ range $i := .Program.Instructions }}
	// {{ printf "Step %d: %s = x^%#x" $i.Output.Index $i.Output (index $.Chain $i.Output.Index) }}
	{{- with add $i.Op }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}", "{{ .Y }}") {{"}}" -}}
	{{ end -}}

	{{- with double $i.Op }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}","{{ .X }}") {{"}}" -}}
	{{ end -}}

	{{- with shift $i.Op -}}
	{{- $first := 0 -}}
	{{- if ne $i.Output.Identifier .X.Identifier }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}","{{ .X }}") {{"}}" -}}
	{{- $first = 1 -}}
	{{- end }}
    {{ range $j := intRange 1 .S }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ $i.Output }}","{{ $i.Output }}") {{"}}" -}}
    {{ end -}}
	{{ end -}}
	{{- end }}
}

#define macro MAIN() = takes(0) returns(0) {
    {{ emit_store_constant_32byte_aligned('MODULUS', 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab) }}
    {{ emit_store_constant_32byte_aligned('ONE_VAL', 1) -}}

    0x00
    0x06
    {{ emit_mem_offset('MODULUS') -}}
    setmodx

    {{ emit_item_to_mont('ONE_VAL_MONT') -}}
}
