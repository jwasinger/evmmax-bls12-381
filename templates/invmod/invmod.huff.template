// Code generated by addchain. DO NOT EDIT.

{{ alloc_input_val("x") -}}
{{ alloc_output_val("z") }}
{{ alloc_mem("MODULUS", 48) -}}


// Allocate Temporaries.
{{ alloc_val("t0") }}


#define macro FqInv() = takes(0) returns(0) {
	
	// Step 1: t0 = x^0x2
    {{ emit_mulmontx("t0","x","x") }}
	// Step 2: t0 = x^0x3
    {{ emit_mulmontx("t0","x", "t0") }}
	// Step 4: t0 = x^0xc
    
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
	// Step 5: t0 = x^0xd
    {{ emit_mulmontx("t0","x", "t0") }}
	// Step 8: t0 = x^0x68
    
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
	// Step 9: t0 = x^0x69
    {{ emit_mulmontx("t0","x", "t0") }}
	// Step 18: t0 = x^0xd200
    
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
	// Step 19: t0 = x^0xd201
    {{ emit_mulmontx("t0","x", "t0") }}
	// Step 51: t0 = x^0xd20100000000
    
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
    {{ emit_mulmontx("t0","t0","t0") }}
	// Step 52: z = x^0xd20100000001
    {{ emit_mulmontx("z","x", "t0") }}
	// Step 68: z = x^0xd201000000010000
    
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
    {{ emit_mulmontx("z","z","z") }}
}

#define macro MAIN() = takes(0) returns(0) {
    // alloc memory that we will use (TODO only alloc as much as needed)
    0x00
    0x1000
    mstore

    {{ emit_store_constant_32byte_aligned('MODULUS', 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab) }}

    {{ emit_slots_used() }}
    0x30
    {{ emit_mem_offset('MODULUS') -}}
    0x00
    setupx

    0x30
    0x00
    {{ emit_mem_offset('x') -}}
    calldatacopy

    {{ emit_evmmax_store_inputs() -}}

    FqInv()

    {{ emit_evmmax_load_outputs() -}}

    {{ EVMMAX_VAL_SIZE }}
    {{ emit_mem_offset("z") -}}
    return
}
