// Code generated by {{ .Meta.Name }}. DO NOT EDIT.

{{"{{"}} alloc_input_val("x") {{"-}}"}}
{{"{{"}} alloc_output_val("z") {{"}}"}}
{{"{{"}} alloc_mem("MODULUS", 48) {{"-}}"}}


// Allocate Temporaries.
{{- range .Program.Temporaries }}
{{"{{"}} alloc_val("{{ . }}") {{"}}"}}
{{- end }}


#define macro FqInv() = takes(0) returns(0) {
	{{ range $i := .Program.Instructions }}
	// {{ printf "Step %d: %s = x^%#x" $i.Output.Index $i.Output (index $.Chain $i.Output.Index) }}
	{{- with add $i.Op }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}", "{{ .Y }}") {{"}}" -}}
	{{ end -}}

	{{- with double $i.Op }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}","{{ .X }}") {{"}}" -}}
	{{ end -}}

	{{- with shift $i.Op -}}
	{{- $first := 0 -}}
	{{- if ne $i.Output.Identifier .X.Identifier }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ .X }}","{{ .X }}") {{"}}" -}}
	{{- $first = 1 -}}
	{{- end }}
    {{ range $j := intRange 0 .S }}
    {{"{{"}} emit_mulmontx("{{$i.Output}}","{{ $i.Output }}","{{ $i.Output }}") {{"}}" -}}
    {{ end -}}
	{{ end -}}
	{{- end }}
}

#define macro MAIN() = takes(0) returns(0) {
    // alloc memory that we will use (TODO only alloc as much as needed)
    0x00
    0x1000
    mstore

    {{"{{"}} emit_store_constant_32byte_aligned('MODULUS', 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab) {{"}}"}}

    {{"{{"}} emit_slots_used() {{"}}"}}
    0x30
    {{"{{"}} emit_mem_offset('MODULUS') {{"-}}"}}
    0x00
    setupx

    0x30
    0x00
    {{"{{"}} emit_mem_offset('x') {{"-}}"}}
    calldatacopy

    {{"{{"}} emit_evmmax_store_inputs() {{"-}}"}}

    FqInv()

    {{"{{"}} emit_evmmax_load_outputs() {{"-}}"}}

    {{"{{"}} EVMMAX_VAL_SIZE {{"}}"}}
    {{"{{"}} emit_mem_offset("z") {{"-}}"}}
    return
}
