{{ alloc_slot('ZERO_VAL') -}}
{{ alloc_slot('ONE_VAL') -}}
{{ alloc_slot('MODULUS') -}}

{{ alloc_range('G1_GEN_X', 1) -}}
{{ alloc_range('G1_GEN_Y', 1) -}}
{{ alloc_range('G1_GEN_Z', 1) -}}

{{ alloc_range('OUTPUT_X', 1) -}}
{{ alloc_range('OUTPUT_Y', 1) -}}
{{ alloc_range('OUTPUT_Z', 1) -}}

// TODO remove unused range
{{ alloc_range('TEMP_POINT_X', 1) -}}
{{ alloc_range('TEMP_POINT_Y', 1) -}}
{{ alloc_range('TEMP_POINT_Z', 1) -}}

{{ alloc_range('TEMP0', 1) -}}
{{ alloc_range('TEMP1', 1) -}}
{{ alloc_range('TEMP2', 1) -}}
{{ alloc_range('TEMP3', 1) -}}
{{ alloc_range('TEMP4', 1) -}}
{{ alloc_range('TEMP5', 1) -}}
{{ alloc_range('TEMP6', 1) -}}
{{ alloc_range('TEMP7', 1) -}}

{{ ref_item('OUTPUT_TEMP_X', 'TEMP5') -}}
{{ ref_item('OUTPUT_TEMP_Y', 'TEMP6') -}}
{{ ref_item('OUTPUT_TEMP_Z', 'TEMP7') -}}

{{ alloc_range('VAL_12', 1) -}}

#define macro SetG1GenZTo1() = takes(0) returns(0) {
    {{ emit_f_set_one('G1_GEN_Z') -}}
    {{ emit_item_to_mont('G1_GEN_Z') -}}
}

#define macro InfCheckSetZero() = takes(0) returns(0) {
{{ start_block() -}}
    {{ emit_f_copy('OUTPUT_X', 'ZERO_VAL') -}}
    {{ emit_f_copy('OUTPUT_Y', 'ZERO_VAL') -}}
{{ end_block() -}}
}

#define macro InfCheck() = takes(0) returns(0) {
{{ start_block() -}}
    // if OUTPUT_X == 0, OUTPUT_Y != 0, OUTPUT_Z == 0:
    //   OUTPUT <- (0, 1, 0) return (0, 0) from the contract

    {{ emit_check_val_nonzero('OUTPUT_X') -}}
    {{ emit_check_val_nonzero('OUTPUT_Z') -}}

    or
    0x00
    eq

    // stack: OUTPUT_X | OUTPUT_Z == 0

    {{ emit_check_val_nonzero('OUTPUT_Y') -}}

    and
    end1 jumpi

    // it's the infinity point, return (0, 0) per eip 2537
    // TODO: huff bug that causes jumpdests to get messed up when evmmax
    // ops are in the same macro
    InfCheckSetZero()

    {{ AFFINE_POINT_SIZE }}
    {{ emit_mem_offset('OUTPUT_X') }}
    return
end1:
{{ end_block() -}}
}

// OUTPUT_SLOT <- OUTPUT_SLOT * 2
#define macro DoubleStep() = takes(0) returns(0) {
{{ start_block() -}}
    // copy OUTPUT_(x/y/z) to TEMP_POINT_(x/y/z)
    {{ emit_f_copy('TEMP_POINT_X', 'OUTPUT_X') -}}
    {{ emit_f_copy('TEMP_POINT_Y', 'OUTPUT_Y') -}}
    {{ emit_f_copy('TEMP_POINT_Z', 'OUTPUT_Z') -}}

    {{ emit_f_sqr('TEMP0', 'TEMP_POINT_Y') -}}
    {{ emit_f_add('OUTPUT_Z', 'TEMP0', 'TEMP0') -}}
    {{ emit_f_add('OUTPUT_Z', 'OUTPUT_Z', 'OUTPUT_Z') -}}
    {{ emit_f_add('OUTPUT_Z', 'OUTPUT_Z', 'OUTPUT_Z') -}}
    {{ emit_f_mul('TEMP1', 'TEMP_POINT_Y', 'TEMP_POINT_Z') -}}
    {{ emit_f_sqr('TEMP2', 'TEMP_POINT_Z') -}}
    {{ emit_f_mul('TEMP2', 'TEMP2', 'VAL_12') -}}

    {{ emit_f_mul('OUTPUT_X', 'TEMP2', 'OUTPUT_Z') -}}
    {{ emit_f_add('OUTPUT_Y', 'TEMP0', 'TEMP2') -}}
    {{ emit_f_mul('OUTPUT_Z', 'TEMP1', 'OUTPUT_Z') -}}
    {{ emit_f_add('TEMP1', 'TEMP2', 'TEMP2') -}}
    {{ emit_f_add('TEMP2', 'TEMP1', 'TEMP2') -}}
    {{ emit_f_sub('TEMP0', 'TEMP0', 'TEMP2') -}}
    {{ emit_f_mul('OUTPUT_Y', 'TEMP0', 'OUTPUT_Y') -}}
    {{ emit_f_add('OUTPUT_Y', 'OUTPUT_X', 'OUTPUT_Y') -}}
    {{ emit_f_mul('TEMP1', 'TEMP_POINT_X', 'TEMP_POINT_Y') -}}
    {{ emit_f_mul('OUTPUT_X', 'TEMP0', 'TEMP1') -}}
    {{ emit_f_add('OUTPUT_X', 'OUTPUT_X', 'OUTPUT_X') -}}
{{ end_block() -}}
}

#define fn Double() = takes(0) returns(0) {
    DoubleStep()
}

#define fn DoubleAndAdd() = takes(0) returns(0) {
    DoubleStep()
    AddStep()
}

#define macro InitOutput() = takes(0) returns(0) {
    {{ emit_f_set_zero('OUTPUT_X') -}}
    {{ emit_f_set_one('OUTPUT_Y') -}}
    {{ emit_item_to_mont('OUTPUT_Y') -}}
    {{ emit_f_set_zero('OUTPUT_Z') -}}
}

// OUTPUT_SLOT <- G1_GEN + OUTPUT_SLOT
#define macro AddStep() = takes(0) returns(0) {
{{ start_block() -}}
    // copy G1_GEN into TEMP_POINT_(x/y/z)
    {{ emit_f_copy('TEMP_POINT_X', 'G1_GEN_X') -}}
    {{ emit_f_copy('TEMP_POINT_Y', 'G1_GEN_Y') -}}
    {{ emit_f_copy('TEMP_POINT_Z', 'G1_GEN_Z') -}}

    {{ emit_f_mul('TEMP0', 'OUTPUT_X', 'TEMP_POINT_X') -}}
    {{ emit_f_mul('TEMP1', 'OUTPUT_Y', 'TEMP_POINT_Y') -}}
    {{ emit_f_mul('TEMP2', 'OUTPUT_Z', 'TEMP_POINT_Z') -}}
    {{ emit_f_add('TEMP3', 'OUTPUT_X', 'OUTPUT_Y') -}}
    {{ emit_f_add('TEMP4', 'TEMP_POINT_X', 'TEMP_POINT_Y') -}}
    {{ emit_f_mul('TEMP3', 'TEMP3', 'TEMP4') -}}
    {{ emit_f_add('TEMP4', 'TEMP0', 'TEMP1') -}}
    {{ emit_f_sub('TEMP3', 'TEMP3', 'TEMP4') -}}
    {{ emit_f_add('TEMP4', 'OUTPUT_Y', 'OUTPUT_Z') -}}
    {{ emit_f_add('OUTPUT_TEMP_X', 'TEMP_POINT_Y', 'TEMP_POINT_Z') -}}
    {{ emit_f_mul('TEMP4', 'TEMP4', 'OUTPUT_TEMP_X') -}}
    {{ emit_f_add('OUTPUT_TEMP_X', 'TEMP1', 'TEMP2') -}}
    {{ emit_f_sub('TEMP4', 'TEMP4', 'OUTPUT_TEMP_X') -}}
    {{ emit_f_add('OUTPUT_TEMP_X', 'OUTPUT_X', 'OUTPUT_Z') -}}
    {{ emit_f_add('OUTPUT_TEMP_Y', 'TEMP_POINT_X', 'TEMP_POINT_Z') -}}
    {{ emit_f_mul('OUTPUT_TEMP_X', 'OUTPUT_TEMP_X', 'OUTPUT_TEMP_Y') -}}
    {{ emit_f_add('OUTPUT_TEMP_Y', 'TEMP0', 'TEMP2') -}}
    {{ emit_f_sub('OUTPUT_TEMP_Y', 'OUTPUT_TEMP_X', 'OUTPUT_TEMP_Y') -}}
    {{ emit_f_add('OUTPUT_TEMP_X', 'TEMP0', 'TEMP0') -}}
    {{ emit_f_add('TEMP0', 'OUTPUT_TEMP_X', 'TEMP0') -}}
    {{ emit_f_mul('TEMP2', 'TEMP2', 'VAL_12') -}}
    {{ emit_f_add('OUTPUT_TEMP_Z', 'TEMP1', 'TEMP2') -}}
    {{ emit_f_sub('TEMP1', 'TEMP1', 'TEMP2') -}}
    {{ emit_f_mul('OUTPUT_TEMP_Y', 'OUTPUT_TEMP_Y', 'VAL_12') -}}
    {{ emit_f_mul('OUTPUT_TEMP_X', 'TEMP4', 'OUTPUT_TEMP_Y') -}}
    {{ emit_f_mul('TEMP2', 'TEMP3', 'TEMP1') -}}
    {{ emit_f_sub('OUTPUT_TEMP_X', 'TEMP2', 'OUTPUT_TEMP_X') -}}
    {{ emit_f_mul('OUTPUT_TEMP_Y', 'OUTPUT_TEMP_Y', 'TEMP0') -}}
    {{ emit_f_mul('TEMP1', 'TEMP1', 'OUTPUT_TEMP_Z') -}}
    {{ emit_f_add('OUTPUT_TEMP_Y', 'TEMP1', 'OUTPUT_TEMP_Y') -}}
    {{ emit_f_mul('TEMP0', 'TEMP0', 'TEMP3') -}}
    {{ emit_f_mul('OUTPUT_TEMP_Z', 'OUTPUT_TEMP_Z', 'TEMP4') -}}
    {{ emit_f_add('OUTPUT_TEMP_Z', 'OUTPUT_TEMP_Z', 'TEMP0') -}}

    // copy the result to OUTPUT_X, OUTPUT_Y, OUTPUT_Z
    {{ emit_f_copy('OUTPUT_X', 'OUTPUT_TEMP_X') -}}
    {{ emit_f_copy('OUTPUT_Y', 'OUTPUT_TEMP_Y') -}}
    {{ emit_f_copy('OUTPUT_Z', 'OUTPUT_TEMP_Z') -}}
{{ end_block() -}}
}

#define macro CONVERT_OUTPUT_TO_NORM() = takes(0) returns(0) {
{{ start_block() -}}
    {{ emit_f_mul('OUTPUT_X', 'OUTPUT_X', 'ONE_VAL') }}
    {{ emit_f_mul('OUTPUT_Y', 'OUTPUT_Y', 'ONE_VAL') }}
    {{ emit_f_mul('OUTPUT_Z', 'OUTPUT_Z', 'ONE_VAL') }}
{{ end_block() -}}
}

#define macro MAIN() = takes(0) returns(0) {
{{ start_block() -}}
    // allocate all the memory we will use
    0x00
    0x1192 // TODO make this generated by a template call
    mstore

    {{ emit_store_constant_32byte_aligned('MODULUS', 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab) }}

    0x00
    0x06
    {{ emit_mem_offset('MODULUS') -}}
    setmodx

    // load the scalar
    0x00
    calldataload
    //stack: scalar

    // copy the point (affine)
    0x60
    0x20
    {{ emit_mem_offset('G1_GEN_X') -}}
    calldatacopy
    //stack: scalar

    {{ emit_item_to_mont('G1_GEN_X') -}}
    {{ emit_item_to_mont('G1_GEN_Y') -}}

    {{ emit_store_constant_32byte_aligned('VAL_12', 12) -}}
    {{ emit_store_constant_32byte_aligned('ONE_VAL', 1) -}}

    //VAL_12 < 12
    {{ emit_item_to_mont('VAL_12') -}}

    SetG1GenZTo1()

    InitOutput()

    //stack: scalar

    // strip off assumed-zero msb of the scalar
    0x01
    shl

    // TODO: fail explicitly when a user provides a scalar that is larger than 255 bits

    // see how big the scalar is
{% for i in range(255) %}
    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body{{i}} rjumpi
    loop_body{{i}} jumpi

    0x01 shl
{% endfor %}

// main loop
{% for i in range(255) %}
loop_body{{i}}: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_{{i}} rjumpi
    double_step_{{i}} jumpi

    {% if i == 254 %}
        DoubleAndAdd()
    {% else %}
        // TODO call add with rjump
        // cost: push(ret_addr) + rjump + jumpi = 20
        DoubleAndAdd()
    {% endif %}

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body{{i + 1}})
    {% if i == 254 %}
        end jump
    {% else %}
        loop_body{{i + 1}} jump
    {% endif %}

double_step_{{i}}:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()

    // shift-out the top bit of the scalar
    0x01
    shl


{% endfor %}

// convert the output to canonical form
end:
    InfCheck()
    //CONVERT_OUTPUT_TO_NORM()

    // TODO
    // CONVERT_TO_AFFINE()

    {{ PROJ_POINT_SIZE }}
    {{ emit_mem_offset('OUTPUT_X') -}}
    return
{{ end_block() -}}
}
