#define constant G1_GEN_X = 0x0
#define constant G1_GEN_Y = 0x1
#define constant G1_GEN_Z = 0x2
#define constant OUTPUT_X = 0x3
#define constant OUTPUT_Y = 0x4
#define constant OUTPUT_Z = 0x5

// TODO remove unused range

#define constant TEMP_POINT_X = 0x6
#define constant TEMP_POINT_Y = 0x7
#define constant TEMP_POINT_Z = 0x8

#define constant TEMP0 = 0x9
#define constant TEMP1 = 0xa
#define constant TEMP2 = 0xb
#define constant TEMP3 = 0xc
#define constant TEMP3 = 0xd
#define constant TEMP4 = 0xe
#define constant TEMP5 = 0xf
#define constant TEMP6 = 0x10
#define constant TEMP7 = 0x11

#define constant ONE_VAL = 0x12
#define constant ONE_VAL_OFFSET = 0x360
#define constant ONE_VAL_OFFSET_PLUS_16 = 0x370
#define constant VAL_12 = 0x13
#define constant VAL_12_OFFSET = 0x390
#define constant VAL_12_OFFSET_PLUS_16 = 0x3a0
#define constant ZERO_VAL = 0x14

#define constant G1_GEN_X_OFFSET = 0x00
#define constant G1_GEN_X_OFFSET_PLUS_32 = 0x20
#define constant G1_GEN_Y_OFFSET = 0x30
#define constant G1_GEN_Y_OFFSET_PLUS_32 = 0x50
#define constant G1_GEN_Z_OFFSET = 0x60
#define constant G1_GEN_Z_OFFSET_PLUS_16 = 0x70
#define constant OUTPUT_X_OFFSET = 0x90
#define constant OUTPUT_X_OFFSET_PLUS_32 = 0xb0
#define constant OUTPUT_Y_OFFSET = 0xc0
#define constant OUTPUT_Y_OFFSET_PLUS_32 = 0xe0
#define constant OUTPUT_Z_OFFSET = 0xf0
#define constant OUTPUT_Z_OFFSET_PLUS_32 = 0x110
#define constant TEMP5_OFFSET = 0x02d0
#define constant TEMP5_OFFSET_PLUS_32 = 0x02f0

// OUTPUT_X <- OUTPUT_X / OUTPUT_Z
// OUTPUT_Y <- OUTPUT_Y / OUTPUT_Z
#define macro ToAffine() = takes(0) returns(0) {
    INVMOD_OUTPUT_Z()
    __mulmontx(OUTPUT_X, OUTPUT_X, OUTPUT_Z)
    __mulmontx(OUTPUT_Y, OUTPUT_Y, OUTPUT_Z)
}

#define macro InfCheckSetZero() = takes(0) returns(0) {
    __addmodx(OUTPUT_X, ZERO_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Y, ZERO_VAL, ZERO_VAL)
}

#define macro InfCheck() = takes(0) returns(0) {
    // if OUTPUT_X == 0, OUTPUT_Y != 0, OUTPUT_Z == 0:
    //   OUTPUT <- (0, 1, 0) return (0, 0) from the contract

    [OUTPUT_X_OFFSET]
    mload
    [OUTPUT_X_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    // stack: OUTPUT_X (32 most significant bytes), OUTPUT_X (16 least significant bytes)

    0x00
    eq
    eq

    // stack: OUTPUT_X == 0

    [OUTPUT_Z_OFFSET]
    mload
    [OUTPUT_Z_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    // stack: OUTPUT_Z (32 most significant bytes), OUTPUT_Z (16 least significant bytes)
    
    0x00
    eq
    eq

    eq
    // stack: OUTPUT_X == OUTPUT_Z == 0

    [OUTPUT_Y_OFFSET]
    mload

    [OUTPUT_Y_OFFSET_PLUS_32]
    mload
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and
    // stack: OUTPUT_Y (32 most significant bytes), OUTPUT_Y (16 least significant bytes)

    or
    0x00
    swap1
    gt

    // stack: OUTPUT_Y != 0, OUTPUT_X == OUTPUT_Z == 0

    eq
    // TODO is the below still the case?
    // huff bug here:  doesn't place jumpdest op at end_if label
    end1 jumpi

    // it's the infinity point, return (0, 0) per eip 2537
    // TODO: huff bug that causes jumpdests to get messed up when evmmax
    // ops are in the same macro
    InfCheckSetZero()

    0x60 // 96 = 48 * 2 == (0,0)
    [OUTPUT_X_OFFSET]
    return
end1:
}

// OUTPUT_SLOT <- OUTPUT_SLOT * 2
#define macro DoubleStep() = takes(0) returns(0) {
    // copy OUTPUT_(x/y/z) to TEMP_POINT_(x/y/z)
    __addmodx(TEMP_POINT_X, OUTPUT_X, ZERO_VAL)
    __addmodx(TEMP_POINT_Y, OUTPUT_Y, ZERO_VAL)
    __addmodx(TEMP_POINT_Z, OUTPUT_Z, ZERO_VAL)
    __mulmontx(TEMP0, TEMP_POINT_Y, TEMP_POINT_Y)
    __addmodx(OUTPUT_Z, TEMP0, TEMP0)
    __addmodx(OUTPUT_Z, OUTPUT_Z, OUTPUT_Z)
    __mulmontx(TEMP1, TEMP_POINT_Y, TEMP_POINT_Z)
    __mulmontx(TEMP2, TEMP_POINT_Z, TEMP_POINT_Z)
    __mulmontx(TEMP2, TEMP2, VAL_12)
    __mulmontx(OUTPUT_X, TEMP2, OUTPUT_Z)
    __addmodx(OUTPUT_Y, TEMP0, TEMP2)
    __mulmontx(OUTPUT_Z, TEMP1, OUTPUT_Z)
    __addmodx(TEMP1, TEMP2, TEMP2)
    __addmodx(TEMP2, TEMP1, TEMP2)
    __submodx(TEMP0, TEMP0, TEMP2)
    __mulmontx(OUTPUT_Y, TEMP0, OUTPUT_Y)
    __addmodx(OUTPUT_Y, OUTPUT_X, OUTPUT_Y)
    __mulmontx(TEMP1, TEMP_POINT_X, TEMP_POINT_Y)
    __mulmontx(OUTPUT_X, TEMP0, TEMP1)
    __addmodx(OUTPUT_X, OUTPUT_X, OUTPUT_X)
}

#define fn Double() = takes(0) returns(0) {
    DoubleStep()
}

#define fn DoubleAndAdd() = takes(0) returns(0) {
    DoubleStep()
    AddStep()
}

#define macro InitOutput() = takes(0) returns(0) {
    // copy g1_gen to where we construct the output
    // TODO, just place G1_gen in the output slot
    __addmodx(OUTPUT_X, ZERO_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Y, ONE_VAL, ZERO_VAL)
    __addmodx(OUTPUT_Z, ZERO_VAL, ZERO_VAL)
}

#define fn DoubleAndAddWithInfCheck() = takes(0) returns(0) {
    DoubleStep()
    InfCheck() // TODO only need this (0,0) is a point on the curve. check if it is. 
    AddStep()
    InfCheck()
}

// OUTPUT_SLOT <- G1_GEN + OUTPUT_SLOT
#define constant OUTPUT_TEMP_X = 0xf // TEMP5
#define constant OUTPUT_TEMP_Y = 0x10 // TEMP6
#define constant OUTPUT_TEMP_Z = 0x11 // TEMP7
// OUTPUT_SLOT <- OUTPUT_SLOT + TEMP_POINT_SLOT
#define macro AddStep() = takes(0) returns(0) {
    // copy G1_GEN into TEMP_POINT_(x/y/z)
    __addmodx(TEMP_POINT_X, G1_GEN_X, ZERO_VAL)
    __addmodx(TEMP_POINT_Y, G1_GEN_Y, ZERO_VAL)
    __addmodx(TEMP_POINT_Z, G1_GEN_Z, ZERO_VAL)
    __mulmontx(TEMP0, OUTPUT_X, TEMP_POINT_X)
    __mulmontx(TEMP1, OUTPUT_Y, TEMP_POINT_Y)
    __mulmontx(TEMP2, OUTPUT_Z, TEMP_POINT_Z)
    __addmodx(TEMP3, OUTPUT_X, OUTPUT_Y)

    __addmodx(TEMP4, TEMP_POINT_X, TEMP_POINT_Y)
    __mulmontx(TEMP3, TEMP3, TEMP4)
    __addmodx(TEMP4, TEMP0, TEMP1)
    __submodx(TEMP3, TEMP3, TEMP4)
    __addmodx(TEMP4, OUTPUT_Y, OUTPUT_Z)
    __addmodx(OUTPUT_TEMP_X, TEMP_POINT_Y, TEMP_POINT_Z)
    __mulmontx(TEMP4, TEMP4, OUTPUT_TEMP_X)
    __addmodx(OUTPUT_TEMP_X, TEMP1, TEMP2)
    __submodx(TEMP4, TEMP4, OUTPUT_TEMP_X)
    __addmodx(OUTPUT_TEMP_X, OUTPUT_X, OUTPUT_Z)
    __addmodx(OUTPUT_TEMP_Y, TEMP_POINT_X, TEMP_POINT_Y)
    __mulmontx(OUTPUT_TEMP_X, OUTPUT_TEMP_X, OUTPUT_TEMP_Y)
    __addmodx(OUTPUT_TEMP_Y, TEMP0, TEMP2)
    __submodx(OUTPUT_TEMP_Y, OUTPUT_TEMP_X, OUTPUT_TEMP_Y)
    __addmodx(OUTPUT_TEMP_X, TEMP0, TEMP0)
    __addmodx(TEMP0, OUTPUT_TEMP_X, TEMP0)
    __mulmontx(TEMP2, TEMP2, VAL_12)
    __addmodx(OUTPUT_TEMP_Z, TEMP1, TEMP2)
    __submodx(TEMP1, TEMP1, TEMP2)
    __mulmontx(OUTPUT_TEMP_Y, OUTPUT_TEMP_Y, VAL_12)
    __mulmontx(OUTPUT_TEMP_X, TEMP4, OUTPUT_TEMP_Y)
    __mulmontx(TEMP2, TEMP3, TEMP1)
    __submodx(OUTPUT_TEMP_X, TEMP2, OUTPUT_TEMP_X)
    __mulmontx(OUTPUT_TEMP_Y, OUTPUT_TEMP_Y, TEMP0)
    __mulmontx(TEMP1, TEMP1, OUTPUT_TEMP_Z)
    __addmodx(OUTPUT_TEMP_Y, TEMP1, OUTPUT_TEMP_Y)
    __mulmontx(TEMP0, TEMP0, TEMP3)
    __mulmontx(OUTPUT_TEMP_Z, OUTPUT_TEMP_Z, TEMP4)
    __addmodx(OUTPUT_TEMP_Z, OUTPUT_TEMP_Z, TEMP0)

    // copy the result to OUTPUT_X, OUTPUT_Y, OUTPUT_Z
    __addmodx(OUTPUT_X, OUTPUT_TEMP_X, ZERO_VAL)
    __addmodx(OUTPUT_Y, OUTPUT_TEMP_Y, ZERO_VAL)
    __addmodx(OUTPUT_Z, OUTPUT_TEMP_Z, ZERO_VAL)
}

#define macro CONVERT_OUTPUT_TO_NORM() = takes(0) returns(0) {
    __mulmontx(OUTPUT_X, OUTPUT_X, ONE_VAL)
    __mulmontx(OUTPUT_Y, OUTPUT_Y, ONE_VAL)
    __mulmontx(OUTPUT_Z, OUTPUT_Z, ONE_VAL) // TODO remove this after affine conversion is added in
}

#define macro MAIN() = takes(0) returns(0) {
    // allocate all the memory we will use
    0x00
    0x03c0
    mstore

    // store the constant 12
    0xc
    [VAL_12_OFFSET_PLUS_16]
    mstore

    // set the modulus
    0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f624
    0x00
    mstore
    //stack:

    0x1eabfffeb153ffffb9feffffffffaaab00000000000000000000000000000000
    0x20
    mstore
    //stack:

    0x06
    0x00
    setmodx
    //stack:

    // load the scalar input
    0x00
    calldataload
    //stack: scalar

    // set the G1 generator (TODO: embed this in the bytecode and copy it directly to the evmmax memory space)
    // g1_gen.x (normal form) = 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb
    0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac58
    [G1_GEN_X_OFFSET]
    mstore
    //stack: scalar

    0x6c55e83ff97a1aeffb3af00adb22c6bb00000000000000000000000000000000
    [G1_GEN_X_OFFSET_PLUS_32]
    mstore

    // g1_gen.y (normal form) = 0x8b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
    0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3ed
    [G1_GEN_Y_OFFSET]
    mstore
    //stack: scalar

    0xd03cc744a2888ae40caa232946c5e7e100000000000000000000000000000000
    [G1_GEN_Y_OFFSET_PLUS_32]
    mstore
    //stack: scalar

    0x01
    [G1_GEN_Z_OFFSET_PLUS_16]
    mstore

    // TODO we only need to compute mont(1) once.
    // after: copying it elsewhere is cheaper
    0x01
    [ONE_VAL_OFFSET_PLUS_16]
    mstore

    [G1_GEN_X]
    dup1
    tomontx
    [G1_GEN_Y]
    dup1
    tomontx
    [G1_GEN_Z]
    dup1
    tomontx
    [VAL_12]
    dup1
    tomontx
    [ONE_VAL]
    dup1
    tomontx

    InitOutput()

    //stack: scalar

    // strip off assumed-zero msb of the scalar
    0x01
    shl

    // TODO: fail explicitly when a user provides a scalar that is larger than 255 bits

    // TODO: if scalar is 1, return the generator point

    // see how big the scalar is
{% for i in range(255) %}
    dup1
    0xff
    shr
    0x01
    and

    //TODO loop_body{{i}} rjumpi
    loop_body{{i}} jumpi

    0x01 shl
{% endfor %}

// main loop
{% for i in range(255) %}
loop_body{{i}}: // this doesn't actually have to be a jumpdest in the generated bytecode
    dup1
    0xff
    shr
    0x00
    eq
    // is_msb_0, scalar
    // TODO: double_step_{{i}} rjumpi
    double_step_{{i}} jumpi

    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    {% if i == 254 %}
        DoubleAndAddWithInfCheck()
    {% else %}
        DoubleAndAdd()
    {% endif %}

    // shift-out the top bit of the scalar
    0x01
    shl

    //TODO: __rjump(loop_body{{i + 1}})
    {% if i == 254 %}
        end jump
    {% else %}
        loop_body{{i + 1}} jump
    {% endif %}

double_step_{{i}}:
    // TODO call add with rjump
    // cost: push(ret_addr) + rjump + jumpi = 20
    Double()
    {% if i == 254 %}
        InfCheck()
    {% endif %}

    // shift-out the top bit of the scalar
    0x01
    shl


{% endfor %}

// TODO
// CONVERT_TO_AFFINE()

// convert the output to canonical form
end:
    CONVERT_OUTPUT_TO_NORM()

    0x90
    [OUTPUT_X_OFFSET]
    return
}
